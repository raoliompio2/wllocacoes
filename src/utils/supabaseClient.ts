import { createClient, Session } from '@supabase/supabase-js';
import { Database } from './database.types';

// For√ßar o URL correto do ambiente
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://fwsqvutgtwjyjbukydsy.supabase.co';
// Usar a chave do ambiente ou a chave hardcoded como fallback, garantindo que seja uma chave v√°lida
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ3c3F2dXRndHdqeWpidWt5ZHN5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDk5MDg3NTgsImV4cCI6MjAyNTQ4NDc1OH0.WDEkGHoTiDYo_QoYHPgfQ0eTJLKMSWh4-_Qj-QRgRSY';

// Debug aprimorado para verificar credenciais
console.log('üîÑ Inicializando cliente Supabase:');
console.log(`üì° URL: ${supabaseUrl}`);
console.log(`üîë API Key: ${supabaseAnonKey.substring(0, 15)}...`);

// Verificar se as credenciais est√£o definidas
if (!supabaseUrl) {
  console.error('‚ùå Erro cr√≠tico: URL do Supabase n√£o definida');
  throw new Error('Missing Supabase URL. Please check your configuration.');
}

if (!supabaseAnonKey) {
  console.error('‚ùå Erro cr√≠tico: ANON Key do Supabase n√£o definida');
  throw new Error('Missing Supabase ANON Key. Please check your configuration.');
}

// Validar formato da URL
try {
  new URL(supabaseUrl);
} catch (error) {
  console.error('‚ùå Erro cr√≠tico: Formato de URL do Supabase inv√°lido');
  throw new Error('Invalid Supabase URL format. Please check your URL.');
}

// Validar formato do JWT token (verifica√ß√£o b√°sica)
if (!supabaseAnonKey.includes('.') || supabaseAnonKey.split('.').length !== 3) {
  console.warn('‚ö†Ô∏è Alerta: A chave de API n√£o parece ser um JWT v√°lido (deve ter formato xxx.yyy.zzz)');
}

// Inicializar o cliente Supabase com op√ß√µes adicionais
export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storageKey: 'panda-loc-auth-storage',
    flowType: 'pkce'
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-js-web'
    }
  },
  // Adicionar configura√ß√µes para melhorar a estabilidade da conex√£o
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Fun√ß√£o para limpar tokens de autentica√ß√£o antigos que podem causar conflitos
export const clearAuthCache = () => {
  try {
    // Limpar tokens antigos do localStorage
    const keysToRemove = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && (key.includes('supabase.auth') || key.includes('sb-'))) {
        keysToRemove.push(key);
      }
    }
    
    keysToRemove.forEach(key => {
      console.log(`Removendo chave antiga de autentica√ß√£o: ${key}`);
      localStorage.removeItem(key);
    });
    
    return true;
  } catch (error) {
    console.error('Erro ao limpar cache de autentica√ß√£o:', error);
    return false;
  }
};

// Fun√ß√£o para verificar e renovar a sess√£o atual
export const refreshSession = async (): Promise<boolean> => {
  try {
    console.log('Tentando renovar sess√£o...');
    
    // Primeiro obter a sess√£o atual para ver se existe
    const { data: sessionData } = await supabase.auth.getSession();
    
    if (!sessionData.session) {
      console.log('Nenhuma sess√£o ativa para renovar');
      
      // Tentar extrair tokens da URL hash, caso estejamos em uma redefini√ß√£o de senha
      const hashParams = new URLSearchParams(window.location.hash.substring(1));
      const accessToken = hashParams.get('access_token');
      const refreshToken = hashParams.get('refresh_token');
      
      if (accessToken && refreshToken) {
        console.log('Encontrados tokens na URL, tentando estabelecer sess√£o');
        const { data, error } = await supabase.auth.setSession({
          access_token: accessToken,
          refresh_token: refreshToken,
        });
        
        if (error) {
          console.error('Erro ao definir sess√£o a partir de tokens na URL:', error);
          return false;
        }
        
        if (data.session) {
          console.log('Sess√£o estabelecida com sucesso a partir de tokens na URL');
          return true;
        }
      }
      
      return false;
    }
    
    // Se temos uma sess√£o, tentar renovar
    const { data, error } = await supabase.auth.refreshSession();
    
    if (error) {
      console.warn('Erro ao renovar sess√£o:', error);
      return false;
    }
    
    if (data.session) {
      console.log('Sess√£o renovada com sucesso');
      return true;
    } else {
      console.log('Falha ao renovar sess√£o - nenhuma nova sess√£o retornada');
      return false;
    }
  } catch (error) {
    console.error('Erro n√£o tratado ao renovar sess√£o:', error);
    return false;
  }
};

// Fun√ß√£o para verificar se h√° uma sess√£o v√°lida
export const hasValidSession = async (): Promise<boolean> => {
  try {
    const { data } = await supabase.auth.getSession();
    return !!data.session;
  } catch (error) {
    console.error('Erro ao verificar sess√£o:', error);
    return false;
  }
};

// Fun√ß√£o para definir uma sess√£o a partir dos par√¢metros na URL
export const setSessionFromUrl = async (): Promise<Session | null> => {
  try {
    // Verificar se h√° tokens no hash da URL
    if (window.location.hash) {
      const hashParams = new URLSearchParams(window.location.hash.substring(1));
      const accessToken = hashParams.get('access_token');
      const refreshToken = hashParams.get('refresh_token');
      
      if (accessToken && refreshToken) {
        console.log('Encontrados tokens na URL, tentando estabelecer sess√£o');
        const { data, error } = await supabase.auth.setSession({
          access_token: accessToken,
          refresh_token: refreshToken,
        });
        
        if (error) {
          console.error('Erro ao definir sess√£o a partir de tokens na URL:', error);
          return null;
        }
        
        if (data.session) {
          console.log('Sess√£o estabelecida com sucesso a partir de tokens na URL');
          return data.session;
        }
      }
    }
    
    return null;
  } catch (error) {
    console.error('Erro ao tentar definir sess√£o a partir da URL:', error);
    return null;
  }
};

// Tornar a chave acess√≠vel para debug
const apiKey = supabaseAnonKey; // Apenas para uso em debug e acesso interno

// Testar conex√£o - Vers√£o aprimorada
export const testConnection = async () => {
  try {
    console.log('üîÑ Testando conex√£o com o Supabase...');
    
    // Primeiro teste: tentar opera√ß√£o de leitura
    const { data: readData, error: readError } = await supabase
      .from('profiles')
      .select('id')
      .limit(1);
    
    if (readError) {
      console.error('‚ùå Teste de leitura falhou:', readError);
      
      // Se for erro de autentica√ß√£o, tente obter o token da sess√£o atual
      if (readError.code === '401') {
        const { data: { session } } = await supabase.auth.getSession();
        console.log('üîë Sess√£o atual:', session ? 'Ativa' : 'Nenhuma');
        
        if (session) {
          console.log('üë§ Usu√°rio autenticado:', session.user.email);
          // Verifica se expires_at est√° definido antes de us√°-lo
          if (session.expires_at) {
            console.log('‚è±Ô∏è Token expira em:', new Date(session.expires_at * 1000).toLocaleString());
          } else {
            console.log('‚è±Ô∏è Token sem data de expira√ß√£o definida');
          }
        }
      }
      
      return false;
    }
    
    console.log('‚úÖ Teste de leitura bem-sucedido!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro n√£o tratado ao testar conex√£o:', error);
    return false;
  }
};

// Executar teste de conex√£o
if (typeof window !== 'undefined') {
  testConnection()
    .then(connected => {
      if (!connected) {
        console.warn('‚ö†Ô∏è Aviso: Aplica√ß√£o pode ter funcionalidade limitada devido a problemas de conex√£o com o Supabase.');
      } else {
        console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!');
      }
    })
    .catch(err => {
      console.error('‚ùå Erro ao inicializar teste de conex√£o:', err);
    });
    
  // Tentar definir sess√£o a partir da URL no carregamento inicial
  setSessionFromUrl()
    .then(session => {
      if (session) {
        console.log('‚úÖ Sess√£o definida a partir da URL no carregamento inicial');
      }
    })
    .catch(err => {
      console.error('‚ùå Erro ao tentar definir sess√£o inicial a partir da URL:', err);
    });
}